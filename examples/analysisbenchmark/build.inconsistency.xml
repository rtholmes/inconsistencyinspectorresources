<project name="InconsistencyInspectorResources">
	<description>
		This project can be added to existing ant-based build systems to extract static and dynamic call graphs.
	</description>

	<!-- InconsistencyInspector.properties is the main configuration file -->
	<property file="InconsistencyInspector.properties" />
	
	<!-- Reporting locations -->
	<property name="report" location="${report.home}" />
	<property name="report.staticAnalysis" location="${report}/static" />
	<property name="report.dynamicAnalysis" location="${report}/dynamic" />

	<property name="maxmemory" value="1536m" />

	<!-- Location for Dependency Finder related files (taskdefs, etc.) -->
	<property name="dependencyfinder.home" value="${inconsistency.home}/DependencyFinderResources" />

	<!-- These are the resources needed by the DependencyFinder framework to run the executable behind the iStatic task -->
	<path id="iiStatic.resources">
		<pathelement location="${dependencyfinder.home}/classes" />
		<fileset dir="${inconsistency.home}/" includes="ca.uwaterloo.cs.se.inconsistency.core_*.jar" />
		<fileset dir="${inconsistency.home}/" includes="DependencyFinder_*.jar" />
		<pathelement location="${dependencyfinder.home}/lib/jakarta-oro.jar" />
		<pathelement location="${dependencyfinder.home}/lib/log4j.jar" />
	</path>

	<!-- dependencyfinder ant definitions -->
	<taskdef resource="dependencyfindertasks.properties">
		<classpath refid="iiStatic.resources" />
	</taskdef>

	<!-- aspectj ant definitions -->
	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<pathelement location="${inconsistency.home}/lib/aspectjtools.jar" />
		</classpath>
	</taskdef>

	<target name="iiInit" description="Inconsistency: initialize environment (e.g., ensure folders exist))">
		<!-- create the time stamp -->
		<tstamp />
		<!-- ensure reporting directories exist -->
		<mkdir dir="${report.staticAnalysis}" />
		<mkdir dir="${report.dynamicAnalysis}" />
	</target>

	<!-- 
		Main Static Extraction Task
		Before this can be run the system _must_ be compiled first (e.g., ant compile)
	 -->
	<target name="iiStatic" depends="iiInit" description="Extract static call graph">
		<!-- BUG: This is capturing our tracing code -->
		
		<!-- NOTE: 'ant compile' must happen before this! -->
		<!-- NOTE: for unknown reasons this usually fails on the first attempt if 'ant clean' is run first -->
		<dependencyextractor destfile="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" xml="yes" minimize="yes">
			<path>
				<pathelement location="${inconsistency.static.src}" />
				<pathelement location="${inconsistency.static.test}" />
			</path>
		</dependencyextractor>

		<!-- make a copy of the latest extraction for easier reference -->
		<copy file="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" tofile="${report.staticAnalysis}/static_latest.xml" />
		
	</target>
	<!-- / Main Static Extraction Task -->


	<!-- Classpath for dynamic tracing -->
	<path id="inconsistency.instrumented.classpath">

		<!-- Earlier classes override later ones (e.g., here the instrumented classes trumps their non-instrumented counterparts) -->
		<path location="${inconsistency.instrumented}" />
		
		<!-- Corresponds to the classpath id used by the project test target -->
		<path refid="${inconsistency.classpath}" />
		
		<!-- Classpath entries to support the tracing infrastructure -->
		<pathelement location="${inconsistency.home}/lib/ca.lsmr.common_20110124.jar"/>
		<pathelement location="${inconsistency.home}/lib/aspectjtools.jar"/>
		<pathelement location="${inconsistency.home}/lib/aspectjrt.jar"/>
		<fileset dir="${inconsistency.home}/" includes="DynamicTracer_*.jar" />
	</path>
	

	<!-- After the project has been compiled it can be woven -->
	<target name="iiWeave" depends="iiInit" description="Instrument resources to prepare for dynamic call graph extraction.">

		<!-- clean the target for the instrumented files -->
    	<delete dir="${inconsistency.instrumented}" />
		<mkdir 	dir="${inconsistency.instrumented}" />

		<!-- weave program -->
		<iajc destDir="${inconsistency.instrumented}" Xlintwarnings="false" showWeaveInfo="false" source="1.6">			

			<argfiles>
				<!-- the aspect list file describes which Tracer aspect to use -->
				<pathelement location="${inconsistency.aspect.lst}" />
			</argfiles>

			<inpath>
				<!-- these arguments describe which files to weave -->
				<pathelement location="${inconsistency.static.src}" />
				<pathelement location="${inconsistency.static.test}" />				
			</inpath>

			<classpath>
				<path refid="inconsistency.instrumented.classpath" />
			</classpath>
		</iajc>
	
	</target>

	<target name="iiDynamic" description="Run test suite collecting the dynamic call graph.">
		
		<junit maxmemory="${maxmemory}" printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
			<classpath refid="inconsistency.instrumented.classpath" />
			<formatter type="plain" usefile="false" />
			
			<!-- extracted from original project build.xml file -->
			<batchtest todir="${reports}/test">
	        	<fileset dir="${test.source.root}">
	          		<include name="**/*Test.java"/>
	        	</fileset>
	      	</batchtest>
		</junit>

	</target>


</project>
