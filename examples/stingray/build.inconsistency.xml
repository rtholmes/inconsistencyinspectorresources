<project name="InconsistencyInspectorcyInspectorResources">
	<description>
		This project can be added to existing ant-based build systems to extract static and dynamic call graphs.
	</description>

	<!-- InconsistencyInspector.properties is the main configuration file -->
	<property file="InconsistencyInspector.properties" />
	
	<!-- Reporting locations -->
	<property name="report" location="${report.home}" />
	<property name="report.staticAnalysis" location="${report}/static" />
	<property name="report.dynamicAnalysis" location="${report}/dynamic" />

	<property name="maxmemory" value="1536m" />

	<!-- file prefix for the output files -->
	<!-- this clause makes the `-Dii=foo_` optional -->
	<condition property="ii" value="ii">
		<not>
			<isset property="ii"/>
		</not>
	</condition>

	<!-- Location for Dependency Finder related files (taskdefs, etc.) -->
	<property name="dependencyfinder.home" value="${inconsistency.home}/DependencyFinderResources" />

	<!-- These are the resources needed by the DependencyFinder framework to run the executable behind the iStatic task -->
	<path id="iiStatic.resources">
		<pathelement location="${dependencyfinder.home}/classes" />
		<fileset dir="${inconsistency.home}/" includes="ca.lsmr.common_*.jar"/>
		<fileset dir="${inconsistency.home}/" includes="ca.uwaterloo.cs.se.inconsistency.core_*.jar" />
		<fileset dir="${inconsistency.home}/" includes="DependencyFinder_*.jar" />
		<pathelement location="${dependencyfinder.home}/lib/jakarta-oro.jar" />
		<pathelement location="${dependencyfinder.home}/lib/log4j.jar" />
	</path>

	<!-- dependencyfinder ant definitions -->
	<taskdef resource="dependencyfindertasks.properties">
		<classpath refid="iiStatic.resources" />
	</taskdef>

	<!-- aspectj ant definitions -->
	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<pathelement location="${inconsistency.home}/lib/aspectjtools.jar" />
		</classpath>
	</taskdef>

	<target name="iiInit" description="Inconsistency: initialize environment (e.g., ensure folders exist))">
		<!-- create the time stamp -->
		<tstamp />
		<!-- ensure reporting directories exist -->
		<mkdir dir="${report}" />
		<mkdir dir="${report.staticAnalysis}" />
		<mkdir dir="${report.dynamicAnalysis}" />
		<delete dir="${report.dynamicAnalysis}/tmp" />
		<mkdir dir="${report.dynamicAnalysis}/tmp" />
	</target>

	<!-- 
		Main Static Extraction Task
		Before this can be run the system _must_ be compiled first (e.g., ant compile)
	 -->
	<target name="iiStatic" depends="iiInit" description="Extract static call graph">
		<!-- BUG: This is capturing our tracing code -->
		
		<!-- NOTE: 'ant compile' must happen before this! -->
		<!-- NOTE: for unknown reasons this usually fails on the first attempt if 'ant clean' is run first -->
		<dependencyextractor destfile="${report}/${ii}_${DSTAMP}-${TSTAMP}_static.xml" xml="yes" minimize="yes">
			<path>
				<pathelement location="${inconsistency.static.src}" />
				<pathelement location="${inconsistency.static.test}" />
			</path>
		</dependencyextractor>

		<!-- make a copy of the latest extraction for easier reference -->
		<copy file="${report}/${ii}_${DSTAMP}-${TSTAMP}_static.xml" tofile="${report}/latest_static.xml" />
		<copy file="${report}/${ii}_${DSTAMP}-${TSTAMP}_static.xml" tofile="${report}/${ii}_static.xml" />
		
	</target>
	<!-- / Main Static Extraction Task -->


	<!-- Classpath for dynamic tracing -->
	<path id="inconsistency.instrumented.classpath">

		<!-- Earlier classes override later ones (e.g., here the instrumented classes trumps their non-instrumented counterparts) -->
		<path location="${inconsistency.instrumented}" />
		
		<!-- Corresponds to the classpath id used by the project test target -->
		<path refid="${inconsistency.classpath}" />
		
		<!-- Classpath entries to support the tracing infrastructure -->
		<pathelement location="${inconsistency.home}/lib/aspectjtools.jar"/>
		<pathelement location="${inconsistency.home}/lib/aspectjrt.jar"/>
		<fileset dir="${inconsistency.home}/" includes="ca.lsmr.common_*.jar"/>
		<fileset dir="${inconsistency.home}/" includes="ca.uwaterloo.cs.se.inconsistency.core_*.jar" />
		<fileset dir="${inconsistency.home}/" includes="DynamicTracer_*.jar" />
	</path>
	

	<!-- After the project has been compiled it can be woven -->
	<target name="iiWeave" depends="iiInit" description="Instrument resources to prepare for dynamic call graph extraction.">

		<!-- clean the target for the instrumented files -->
    		<delete dir="${inconsistency.instrumented}" />
		<mkdir 	dir="${inconsistency.instrumented}" />

		<!-- weave program -->
		
		<iajc destDir="${inconsistency.instrumented}" Xlintwarnings="false" showWeaveInfo="false" source="1.6">			

			<argfiles>
				
				<pathelement location="${inconsistency.aspect.lst}" />
			</argfiles>

			<inpath>
				
				<pathelement location="${inconsistency.static.src}" />
				<pathelement location="${inconsistency.static.test}" />	
				<pathelement location="${inconsistency.static.other1}" />			
			</inpath>

			<classpath>
				<path refid="inconsistency.instrumented.classpath" />
			</classpath>
		</iajc>
	

		<copy todir="${inconsistency.instrumented}" overwrite="true">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${inconsistency.instrumented}" overwrite="true">
			<fileset dir="${test.src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${inconsistency.instrumented}" overwrite="true">
			<fileset dir="${util.src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<!-- copy all resources required -->
		<copy file="${XXX_STINGRAY_XXX.root}/i18n/ResourceBundle.xsd" todir="${inconsistency.instrumented}/com/XXX_STINGRAY_XXX/service/resource/" overwrite="true" />
		<copy file="${XXX_STINGRAY_XXX.root}/i18n/ImgGen/images.xsd" tofile="${inconsistency.instrumented}/com/XXX_STINGRAY_XXX/service/ImgGen.xsd" overwrite="true" />
	
	</target>



	<taskdef name="dynamictracer" classname="edu.washington.cse.longan.trace.DynamicTracer">
		<classpath refid="inconsistency.instrumented.classpath" />	
	</taskdef>

	<target name="iiDynamic" depends="iiInit" description="Run test suite collecting the dynamic call graph.">
		
		<echo message="Running common unit test suite..." />
		<echo message="Back up sql file located in XXX_STINGRAY_XXX/sql/bin/unittest.backup.sql." />
		<property name="maxmemory" value="1536m" />
		<junit fork="yes" printsummary="yes" maxmemory="${maxmemory}" haltonfailure="no" >
		<jvmarg value="-Dnet.sf.ehcache.skipUpdateCheck=true" />

		<jvmarg value="-XX:MaxPermSize=512m" />
		<jvmarg value="-XX:+UseConcMarkSweepGC" />
		<!--<jvmarg value="-XX:+CMSPermGenSweepingEnabled" /> -->
		<jvmarg value="-XX:+CMSClassUnloadingEnabled" />

			<syspropertyset>
				<propertyref builtin="commandline" />
			</syspropertyset>
			<sysproperty key="log4j.configuration" value="log4j-test.xml" />
			<sysproperty key="org.apache.cxf.Logger" value="org.apache.cxf.common.logging.Log4jLogger" />
			<!--<classpath refid="junit.classpath" />-->
			<classpath refid="inconsistency.instrumented.classpath" />
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest toDir="${test.reports.dir}" unless="unittest.failure">
				<fileset dir="${test.src.dir}">
					<!--<include name="**/*ErrorUtilTest.java" />-->
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<!--		
			<antcall target="on-unittest-failure"/>
			<echo message="Importing previous data into the databases..." />
			<antcall target="restore-dev-unittest-schema" />
		-->
		<fail if="unittest.failure" message="JUnit Test Failed!!"/>

	<!-- combine the dynamic traces into a single file -->
		<dynamictracer destfile="${report}/${ii}_${DSTAMP}-${TSTAMP}_dynamic.xml" tmpdir="${report.dynamicAnalysis}/tmp"/>
		<copy file="${report}/${ii}_${DSTAMP}-${TSTAMP}_dynamic.xml" tofile="${report}/latest_dynamic.xml" />
		<copy file="${report}/${ii}_${DSTAMP}-${TSTAMP}_dynamic.xml" tofile="${report}/${ii}_dynamic.xml" />
		
	</target>

	<target name="iiComplete" depends="clean, compile, test-prepare, iiStatic, iiWeave, iiDynamic" description="Run the complete II stack."/>

</project>
